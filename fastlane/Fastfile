default_platform :ios

desc "Setup for development"
lane :setup do
  cocoapods
end

desc "Apply code formatter"
lane :format do
  sh "cd ../; swiftformat Sapphire"
end

desc "Make app icons"
lane :make_app_icon do
  appicon(
      appicon_image_file: 'fastlane/Sapphire.png',
      appicon_devices: %i(iphone ipad),
      appicon_path: 'Sapphire/Assets.xcassets'
  )
end

desc "Update API Configuration"
lane :update_api_configuration do
  coincheck_access_key = ENV['COINCHECK_ACCESS_KEY']
  coincheck_secret_access_key = ENV['COINCHECK_SECRET_ACCESS_KEY']
  bittrex_access_key = ENV['BITTREX_ACCESS_KEY']
  bittrex_secret_access_key = ENV['BITTREX_SECRET_ACCESS_KEY']
  template = <<EOS
import Foundation

struct SecureConfiguration {
    struct Bittrex {
        static let accessKey = "#{bittrex_access_key}"
        static let secretAccessKey = "#{bittrex_secret_access_key}"
    }

    struct CoinCheck {
        static let accessKey = "#{coincheck_access_key}"
        static let secretAccessKey = "#{coincheck_secret_access_key}"
    }
}
EOS
  path = File.join('..', 'Sapphire/Data/WebAPI/SecureConfiguration.swift')
  File.open(path, "w") do |f|
    f.puts(template)
  end
end

platform :ios do
  desc "Submit a new Beta Build to DeployGate"
  lane :beta do
    cocoapods(repo_update: true)

    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)

    update_api_configuration
    gym(
        scheme: 'Sapphire',
        export_method: 'ad-hoc',
        export_options: {
            provisioningProfiles: {
                "cc.clv.ios.Sapphire" => "Sapphire AdHoc",
            }
        },
        xcargs: "DEVELOPMENT_TEAM=#{team_id} PROVISIONING_PROFILE_SPECIFIER=\"Sapphire AdHoc\""
    )
    deploygate(
        api_token: ENV['DEPLOYGATE_API_KEY'],
        user: ENV['DEPLOYGATE_USER'],
        message: "Build #{last_git_commit[:abbreviated_commit_hash]}",
    )

    slack(
        message: "Successfully deployed new App Update."
    )
  end

  error do |lane, exception|
    if lane == :beta
      slack(
          message: exception.message,
          success: false
      )
    end
  end
end
